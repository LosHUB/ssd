
local HttpService = game:GetService("HttpService")
local FileName = "AutoSaveKeyL-HUB_" .. game.Players.LocalPlayer.Name .. ".txt"

-- Charger KeyGuardLibrary
print("Chargement de KeySystem...")
local KeyGuardLibrary = loadstring(game:HttpGet("https://cdn.keyguardian.org/library/v1.0.0.lua"))()
if not KeyGuardLibrary then
    error("Échec du chargement du KeySystem!")
    return
end

-- Configuration de KeyGuard
local trueData = "e25ea5fdaaf140f79fa3b8c4ef5b1d13"
local falseData = "61eaea96b11c4a40a2185e1e38e588bb"

KeyGuardLibrary.Set({
    publicToken = "b21b716cc5054b499e925c99a61bc671",
    privateToken = "de168967445d4680994f08e06aa3ad67",
    trueData = trueData,
    falseData = falseData,
})

-- Fonction pour vérifier la validité de la clé
local function isKeyValid(key)
    local freeResponse = KeyGuardLibrary.validateDefaultKey(key)
    if freeResponse == trueData then
        return "free"
    else
        local premiumResponse = KeyGuardLibrary.validatePremiumKey(key)
        if premiumResponse == trueData then
            return "premium"
        else
            return false
        end
    end
end

-- Fonction pour charger le jeu principal
local function LoadGame()
    print("Chargement du jeu principal...")
    local scriptURL = "https://raw.githubusercontent.com/LosHUB/L-HUBV3/refs/heads/main/Jeux/Main"
    loadstring(game:HttpGet(scriptURL))() -- Charger et exécuter le script principal
end

-- Validation de la clé par défaut
local keyType = isKeyValid(key)
if keyType then
    print("Clé valide détectée : (" .. keyType:upper() .. ")")
    LoadGame()
    return -- Arrêter le script ici si la clé est valide
end

-- Charger Fluent uniquement si la clé est invalide
print("Chargement de Fluent...")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
if not Fluent then
    error("Échec du chargement de Fluent!")
    return
end

-- Créer l'interface utilisateur Fluent
local Window = Fluent:CreateWindow({
    Title = "Key System",
    SubTitle = "L-HUB",
    TabWidth = 100,
    Size = UDim2.fromOffset(440, 300),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

-- Champ pour entrer une clé
local EntKey = Tabs.KeySys:AddInput("Input", {
    Title = "Entrer la clé",
    Description = "Saisissez votre clé ci-dessous",
    Default = key or "",
    Placeholder = "Entrez votre clé ici...",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        key = Value
    end
})

-- Bouton pour vérifier la clé
local CheckKey = Tabs.KeySys:AddButton({
    Title = "Vérifier la clé",
    Description = "Cliquez pour valider la clé entrée",
    Callback = function()
        local keyType = isKeyValid(key)
        if keyType then
            print("Clé valide détectée : (" .. keyType:upper() .. ")")
            writefile(FileName, HttpService:JSONEncode({ key = key }))

            -- Notification de succès
            Fluent:Notify({
                Title = "Clé valide",
                Content = "Votre clé est valide en tant que clé " .. keyType:upper(),
                SubContent = "Accès accordé!",
                Duration = 5
            })
            wait(1)
            LoadGame()
        else
            print("Clé invalide!")
            
            -- Notification d'échec
            Fluent:Notify({
                Title = "Clé invalide",
                Content = "La clé que vous avez saisie est invalide.",
                SubContent = "Veuillez vérifier et réessayer.",
                Duration = 5
            })
        end
    end
})

-- Bouton pour copier le lien de la clé
local GetKey = Tabs.KeySys:AddButton({
    Title = "Obtenir le lien de la clé",
    Description = "Copie le lien de la clé dans le presse-papiers",
    Callback = function()
        if setclipboard then
            setclipboard(KeyGuardLibrary.getLink())
            print("Lien de clé copié dans le presse-papiers!")

            -- Notification de copie réussie
            Fluent:Notify({
                Title = "Lien de clé copié",
                Content = "Le lien a été copié dans le presse-papiers.",
                SubContent = "Vous pouvez maintenant le partager ou l'utiliser.",
                Duration = 5
            })
        else
            print("Presse-papiers non pris en charge!")
            
            -- Notification en cas d'échec
            Fluent:Notify({
                Title = "Erreur de presse-papiers",
                Content = "La fonction de presse-papiers n'est pas prise en charge.",
                SubContent = "Impossible de copier le lien.",
                Duration = 5
            })
        end
    end
})

-- Charger automatiquement une clé enregistrée
if isfile(FileName) then
    local savedData = readfile(FileName)
    local savedKey = HttpService:JSONDecode(savedData).key or nil
    if savedKey and isKeyValid(savedKey) then
        print("Clé enregistrée automatiquement validée : (" .. keyType:upper() .. ")")
        
        Fluent:Notify({
            Title = "Validation automatique",
            Content = "Votre clé enregistrée est valide.",
            SubContent = "Chargement automatique...",
            Duration = 5
        })
        wait(1)
        LoadGame()
    else
        print("Clé enregistrée invalide. Suppression.")
        delfile(FileName)
    end
end

Window:SelectTab(1)
